!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Adafruit_SoftServo	Adafruit_SoftServo.cpp	/^Adafruit_SoftServo::Adafruit_SoftServo(void) {$/;"	f	class:Adafruit_SoftServo
Adafruit_SoftServo	Adafruit_SoftServo.h	/^class Adafruit_SoftServo {$/;"	c
Adafruit_SoftServo::Adafruit_SoftServo	Adafruit_SoftServo.cpp	/^Adafruit_SoftServo::Adafruit_SoftServo(void) {$/;"	f	class:Adafruit_SoftServo
Adafruit_SoftServo::angle	Adafruit_SoftServo.h	/^  uint8_t servoPin, angle;$/;"	m	class:Adafruit_SoftServo
Adafruit_SoftServo::attach	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::attach(uint8_t pin) {$/;"	f	class:Adafruit_SoftServo
Adafruit_SoftServo::attached	Adafruit_SoftServo.cpp	/^boolean  Adafruit_SoftServo::attached(void) {$/;"	f	class:Adafruit_SoftServo
Adafruit_SoftServo::detach	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::detach(void) {$/;"	f	class:Adafruit_SoftServo
Adafruit_SoftServo::isAttached	Adafruit_SoftServo.h	/^  boolean isAttached;$/;"	m	class:Adafruit_SoftServo
Adafruit_SoftServo::micros	Adafruit_SoftServo.h	/^  uint16_t micros;$/;"	m	class:Adafruit_SoftServo
Adafruit_SoftServo::refresh	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::refresh(void) {$/;"	f	class:Adafruit_SoftServo
Adafruit_SoftServo::servoPin	Adafruit_SoftServo.h	/^  uint8_t servoPin, angle;$/;"	m	class:Adafruit_SoftServo
Adafruit_SoftServo::write	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::write(uint8_t a) {$/;"	f	class:Adafruit_SoftServo
Byte	HobbyRadioReceiver.h	202;"	d
Byte	HobbyRadioReceiver.h	33;"	d
CENTER	HobbyRadioReceiver.h	40;"	d
CENTERDEADZONE	HobbyRadioReceiver.h	39;"	d
DEADZONEAREA	HobbyRadioReceiver.h	36;"	d
DEFAULTMODE	HobbyRadioReceiver.h	35;"	d
FULL	HobbyRadioReceiver.h	41;"	d
HobbyRadioReceiver	HobbyRadioReceiver.h	/^HobbyRadioReceiver::HobbyRadioReceiver( Byte num, ... )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver	HobbyRadioReceiver.h	/^HobbyRadioReceiver::HobbyRadioReceiver( const HobbyRadioReceiver& r )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver	HobbyRadioReceiver.h	/^class HobbyRadioReceiver$/;"	c
HobbyRadioReceiver::HobbyRadioReceiver	HobbyRadioReceiver.h	/^HobbyRadioReceiver::HobbyRadioReceiver( Byte num, ... )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::HobbyRadioReceiver	HobbyRadioReceiver.h	/^HobbyRadioReceiver::HobbyRadioReceiver( const HobbyRadioReceiver& r )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::channelPin	HobbyRadioReceiver.h	/^	Byte* channelPin;$/;"	m	class:HobbyRadioReceiver
HobbyRadioReceiver::check	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::check( Byte ch )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::checkExact	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::checkExact( Byte ch )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::checkRaw	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::checkRaw( Byte ch )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::checkRemain	HobbyRadioReceiver.h	/^	int checkRemain;$/;"	m	class:HobbyRadioReceiver
HobbyRadioReceiver::checkVal	HobbyRadioReceiver.h	/^	int checkVal;$/;"	m	class:HobbyRadioReceiver
HobbyRadioReceiver::getNumChannels	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::getNumChannels(){ return (int) numChannels; }$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::mode	HobbyRadioReceiver.h	/^	Byte* mode;$/;"	m	class:HobbyRadioReceiver
HobbyRadioReceiver::numChannels	HobbyRadioReceiver.h	/^	Byte numChannels;$/;"	m	class:HobbyRadioReceiver
HobbyRadioReceiver::setMode	HobbyRadioReceiver.h	/^void HobbyRadioReceiver::setMode( Byte ch, String m )$/;"	f	class:HobbyRadioReceiver
HobbyRadioReceiver::~HobbyRadioReceiver	HobbyRadioReceiver.h	/^HobbyRadioReceiver::~HobbyRadioReceiver()$/;"	f	class:HobbyRadioReceiver
ISR	BrushedMotor.cpp	/^ISR(TIMER2_OVF_vect) {$/;"	f
RAW	HobbyRadioReceiver.h	43;"	d
ROUNDTO	HobbyRadioReceiver.h	34;"	d
STEP	BrushedMotor.cpp	8;"	d	file:
TOGGLE	HobbyRadioReceiver.h	42;"	d
_HOBBYRADIORECEIVER_H_	HobbyRadioReceiver.h	29;"	d
angle	Adafruit_SoftServo.h	/^  uint8_t servoPin, angle;$/;"	m	class:Adafruit_SoftServo
attach	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::attach(uint8_t pin) {$/;"	f	class:Adafruit_SoftServo
attached	Adafruit_SoftServo.cpp	/^boolean  Adafruit_SoftServo::attached(void) {$/;"	f	class:Adafruit_SoftServo
average	BrushedMotor.cpp	/^int average = 0;                \/\/ the average$/;"	v
bUP	BrushedMotor.cpp	/^bool bUP                        = true;$/;"	v
channelPin	HobbyRadioReceiver.h	/^	Byte* channelPin;$/;"	m	class:HobbyRadioReceiver
check	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::check( Byte ch )$/;"	f	class:HobbyRadioReceiver
checkExact	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::checkExact( Byte ch )$/;"	f	class:HobbyRadioReceiver
checkRaw	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::checkRaw( Byte ch )$/;"	f	class:HobbyRadioReceiver
checkRemain	HobbyRadioReceiver.h	/^	int checkRemain;$/;"	m	class:HobbyRadioReceiver
checkVal	HobbyRadioReceiver.h	/^	int checkVal;$/;"	m	class:HobbyRadioReceiver
count	BrushedMotor.cpp	/^int count = 0;            \/\/ interrupt counter$/;"	v
detach	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::detach(void) {$/;"	f	class:Adafruit_SoftServo
getNumChannels	HobbyRadioReceiver.h	/^int HobbyRadioReceiver::getNumChannels(){ return (int) numChannels; }$/;"	f	class:HobbyRadioReceiver
index	BrushedMotor.cpp	/^int index = 0;                  \/\/ the index of the current reading$/;"	v
isAttached	Adafruit_SoftServo.h	/^  boolean isAttached;$/;"	m	class:Adafruit_SoftServo
ledPin	BrushedMotor.cpp	/^int ledPin = 13;          \/\/Pin number for on-board LED.  Probably a #define somewhere for this.$/;"	v
loop	BrushedMotor.cpp	/^void loop()$/;"	f
micros	Adafruit_SoftServo.h	/^  uint16_t micros;$/;"	m	class:Adafruit_SoftServo
mode	HobbyRadioReceiver.h	/^	Byte* mode;$/;"	m	class:HobbyRadioReceiver
numChannels	HobbyRadioReceiver.h	/^	Byte numChannels;$/;"	m	class:HobbyRadioReceiver
numReadings	BrushedMotor.cpp	/^const int numReadings = 5;$/;"	v
pos	BrushedMotor.cpp	/^int pos                         = 0;$/;"	v
previousMilli2	BrushedMotor.cpp	/^unsigned long previousMilli2    = 0;$/;"	v
previousMillis	BrushedMotor.cpp	/^unsigned long previousMillis    = 0;$/;"	v
readings	BrushedMotor.cpp	/^int readings[numReadings];      \/\/ the readings from the analog input$/;"	v
refresh	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::refresh(void) {$/;"	f	class:Adafruit_SoftServo
rx1MinMax	BrushedMotor.cpp	/^int rx1MinMax[2] = {0,0}; \/\/ min and max values coming off radio receiver$/;"	v
servo1	BrushedMotor.cpp	/^Adafruit_SoftServo servo1;$/;"	v
servoInit	BrushedMotor.cpp	/^bool servoInit = false;   \/\/ Have we finished the servo initialization?$/;"	v
servoPin	Adafruit_SoftServo.h	/^  uint8_t servoPin, angle;$/;"	m	class:Adafruit_SoftServo
setMode	HobbyRadioReceiver.h	/^void HobbyRadioReceiver::setMode( Byte ch, String m )$/;"	f	class:HobbyRadioReceiver
setup	BrushedMotor.cpp	/^void setup()$/;"	f
skipCount	BrushedMotor.cpp	/^int skipCount = 0;$/;"	v
toggle	BrushedMotor.cpp	/^bool toggle = false;      \/\/ Toggle for led on pin 13$/;"	v
total	BrushedMotor.cpp	/^int total = 0;                  \/\/ the running total$/;"	v
val1Last	BrushedMotor.cpp	/^int val1Last = 90;        \/\/ Last value for servo1 from loop()$/;"	v
val2last	BrushedMotor.cpp	/^int val2last = 90;        \/\/ Last value for servo2 from loop()$/;"	v
write	Adafruit_SoftServo.cpp	/^void Adafruit_SoftServo::write(uint8_t a) {$/;"	f	class:Adafruit_SoftServo
~HobbyRadioReceiver	HobbyRadioReceiver.h	/^HobbyRadioReceiver::~HobbyRadioReceiver()$/;"	f	class:HobbyRadioReceiver
